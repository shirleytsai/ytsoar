/*  * PROJECT: AR Instrument * http://ytsoar.googlecode.com/ * Copyright 2010 Google Inc * -------------------------------------------------------------------------------- * This work complements FLARManager, developed by Eric Socolofsky * http://transmote.com/flar * FLARManager is Copyright 2009, Eric Socolofsky * * This work also complements FLARToolkit, developed by Saqoosha as part of the Libspark project. * http://www.libspark.org/wiki/saqoosha/FLARToolKit * FLARToolkit is Copyright (C)2008 Saqoosha, * and is ported from NYARToolkit, which is ported from ARToolkit.* * This program is free software; you can redistribute it and/or * modify it under the terms of the GNU General Public License * as published by the Free Software Foundation; either version 2 * of the License, or (at your option) any later version. *  * This program is distributed in the hope that it will be useful, * but WITHOUT ANY WARRANTY; without even the implied warranty of * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the * GNU General Public License for more details. *  * You should have received a copy of the GNU General Public License * along with this framework; if not, write to the Free Software * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA *  */package  com.ytso{	import flash.media.Sound;	import flash.net.URLRequest;	import flash.media.*;	import flash.events.EventDispatcher;	import flash.events.Event;	import flash.events.ProgressEvent;	import flash.events.IOErrorEvent;		import com.ytso.embedded.*;	public class EmbeddedSoundFilePlayer extends EventDispatcher implements ISoundFilePlayer {		//notes in here				private var _volume:Number = 1;		private var sets:Array = new Array();				public function EmbeddedSoundFilePlayer():void {		//////////////////////////////////////////////////////////////////////////////////////////////		// Load the Notes/Mp3s		//		// EmbeddedSoundFilePlayer is not immediately ready for use.		// You need to add event listeners, then call the load() method		// before it can be used;		//		//////////////////////////////////////////////////////////////////////////////////////////////				}				public function load() {		//////////////////////////////////////////////////////////////////////////////////////////////			//		// the load() method causes the EmbeddedSoundFilePlayer to start loading its string resources from		// the server. You should listen for Event.COMPLETE, ProgressEvent.PROGRESS		// and IOErrorEvent.IO_ERROR to monitor the progress of the EmbeddedSoundFilePlayer		// starting up before calling this method.		//		//////////////////////////////////////////////////////////////////////////////////////////////			var setNum:int;		//set 0		setNum = 0;		this.sets[setNum] = new Array();		this.sets[setNum].push(new EmbeddedSoundSet0Note0());		this.sets[setNum].push(new EmbeddedSoundSet0Note1());		this.sets[setNum].push(new EmbeddedSoundSet0Note2());		this.sets[setNum].push(new EmbeddedSoundSet0Note3());		this.sets[setNum].push(new EmbeddedSoundSet0Note4());		this.sets[setNum].push(new EmbeddedSoundSet0Note5());		this.sets[setNum].push(new EmbeddedSoundSet0Note6());		this.sets[setNum].push(new EmbeddedSoundSet0Note7());		this.sets[setNum].push(new EmbeddedSoundSet0Note8());		/*,			//set 1			[				new EmbeddedSoundSet1Note0(),				new EmbeddedSoundSet1Note1(),				new EmbeddedSoundSet1Note2(),				new EmbeddedSoundSet1Note3(),				new EmbeddedSoundSet1Note4(),				new EmbeddedSoundSet1Note5(),				new EmbeddedSoundSet1Note6(),				new EmbeddedSoundSet1Note7(),				new EmbeddedSoundSet1Note8()			],						//set 2			[				new EmbeddedSoundSet2Note0(),				new EmbeddedSoundSet2Note1(),				new EmbeddedSoundSet2Note2(),				new EmbeddedSoundSet2Note3(),				new EmbeddedSoundSet2Note4(),				new EmbeddedSoundSet2Note5(),				new EmbeddedSoundSet2Note6(),				new EmbeddedSoundSet2Note7(),				new EmbeddedSoundSet2Note8()			]*/						this.dispatchEvent(new Event(Event.COMPLETE));		}				public function get muted():Boolean{		//////////////////////////////////////////////////////////////////////////////////////////////		// return if muted		//////////////////////////////////////////////////////////////////////////////////////////////				if(_volume > 0) return false;			return true;					}				public function get numSets():uint {		//////////////////////////////////////////////////////////////////////////////////////////////		// The number of sound sets available		//////////////////////////////////////////////////////////////////////////////////////////////						return sets.length;		}						public function mute(){		//////////////////////////////////////////////////////////////////////////////////////////////		// Mute		//////////////////////////////////////////////////////////////////////////////////////////////						_volume = 0;		}				public function unmute(){		//////////////////////////////////////////////////////////////////////////////////////////////		// un mute		//////////////////////////////////////////////////////////////////////////////////////////////						_volume = 1;		}								public function play(index:int, setNum:int = 0):void{		//////////////////////////////////////////////////////////////////////////////////////////////		// play note from set at index		//////////////////////////////////////////////////////////////////////////////////////////////						if ((setNum < this.sets.length) && (index < this.sets[setNum].length)) {				this.sets[setNum][index].gotoAndPlay(2);			}		} //play			}}