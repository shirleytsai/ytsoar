/*  * PROJECT: AR Instrument * http://ytsoar.googlecode.com/ * Copyright 2010 Google Inc * -------------------------------------------------------------------------------- * This work complements FLARManager, developed by Eric Socolofsky * http://transmote.com/flar * FLARManager is Copyright 2009, Eric Socolofsky * * This work also complements FLARToolkit, developed by Saqoosha as part of the Libspark project. * http://www.libspark.org/wiki/saqoosha/FLARToolKit * FLARToolkit is Copyright (C)2008 Saqoosha, * and is ported from NYARToolkit, which is ported from ARToolkit.* * This program is free software; you can redistribute it and/or * modify it under the terms of the GNU General Public License * as published by the Free Software Foundation; either version 2 * of the License, or (at your option) any later version. *  * This program is distributed in the hope that it will be useful, * but WITHOUT ANY WARRANTY; without even the implied warranty of * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the * GNU General Public License for more details. *  * You should have received a copy of the GNU General Public License * along with this framework; if not, write to the Free Software * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA *  */package com.ytso{		import flash.geom.*	import flash.display.*		public class ScaleBar extends MovieClip{						private var _normal:Sprite = new Sprite();		private var _hover:Sprite = new Sprite();						private var _height:Number;		private var _width:Number;				public function ScaleBar(height:Number = 40, width:Number = 700, useGradient:Boolean = false, activeColor:uint = 0xffffff, activeAplha:Number = .25) {		//////////////////////////////////////////////////////////////////////////////////////////////		// Draw a horizantal scale bar		//////////////////////////////////////////////////////////////////////////////////////////////										_height = height;			_width = width;												var matr:Matrix = new Matrix();  			matr.createGradientBox(700, 12.5, 0, 0, 0);									if(useGradient){				_normal.graphics.beginGradientFill(GradientType.LINEAR, [0x000000, 0x000000],[0, .5],[0, 255],matr,SpreadMethod.PAD,'rgb');			}else{				_normal.graphics.beginFill(0x000000, 0.25);			}			_normal.graphics.drawRect(0,0,_width,_height);			_normal.graphics.endFill();												if(useGradient){				_hover.graphics.beginGradientFill(GradientType.LINEAR, [0xffffff, 0xffffff],[0, .75],[0, 255],matr,SpreadMethod.PAD,'rgb');			}else{				_hover.graphics.beginFill(activeColor, activeAplha);			}			_hover.graphics.drawRect(0,0,_width,_height);			_hover.graphics.endFill();									this.addChild(_normal);			this.addChild(_hover);						_hover.alpha = 0;								}			public function makeActive():void{			_hover.alpha = 1;			_normal.alpha = 0;		}			public function makeNormal():void{			_hover.alpha = 0;			_normal.alpha = 1;		}			}		}