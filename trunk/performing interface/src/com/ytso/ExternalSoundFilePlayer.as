/*  * PROJECT: AR Instrument * http://ytsoar.googlecode.com/ * Copyright 2010 Google Inc * -------------------------------------------------------------------------------- * This work complements FLARManager, developed by Eric Socolofsky * http://transmote.com/flar * FLARManager is Copyright 2009, Eric Socolofsky * * This work also complements FLARToolkit, developed by Saqoosha as part of the Libspark project. * http://www.libspark.org/wiki/saqoosha/FLARToolKit * FLARToolkit is Copyright (C)2008 Saqoosha, * and is ported from NYARToolkit, which is ported from ARToolkit.* * This program is free software; you can redistribute it and/or * modify it under the terms of the GNU General Public License * as published by the Free Software Foundation; either version 2 * of the License, or (at your option) any later version. *  * This program is distributed in the hope that it will be useful, * but WITHOUT ANY WARRANTY; without even the implied warranty of * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the * GNU General Public License for more details. *  * You should have received a copy of the GNU General Public License * along with this framework; if not, write to the Free Software * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA *  */package  com.ytso{	import flash.media.Sound;	import flash.net.URLRequest;	import flash.media.*;	import flash.events.EventDispatcher;	import flash.events.Event;	import flash.events.ProgressEvent;	import flash.events.IOErrorEvent;	public class ExternalSoundFilePlayer extends EventDispatcher implements ISoundFilePlayer {		//notes in here		private var initializing:Boolean = false;		private var initialized:Boolean = false;				private var _volume:Number = 1;		private var sets:Array = new Array();		private var notes:Array = new Array();		private var files:Array = ["LOW_E.mp3","LOW_F.mp3","G.mp3","A.mp3","B.mp3","C.mp3","D.mp3","E.mp3","F.mp3"];				private var loadSetIndex:int = 0;		private var loadFileIndex:int = 0;		private var cumulativeByteCounter:int = 0;		private var progEvent:ProgressEvent; //reusable progress event				public function ExternalSoundFilePlayer():void {		//////////////////////////////////////////////////////////////////////////////////////////////		// Load the Notes/Mp3s		//		// ExternalSoundFilePlayer is not immediately ready for use.		// You need to add event listeners, then call the load() method		// before it can be used;		//		//////////////////////////////////////////////////////////////////////////////////////////////					sets.push( "resources/notes/tink/");			sets.push( "resources/notes/sparkle/");			sets.push( "resources/notes/mix/");			//sets.push( "resources/notes/buzz/");			//sets.push( "resources/notes/casio/");		}				public function load() {		//////////////////////////////////////////////////////////////////////////////////////////////			//		// the load() method causes the ExternalSoundFilePlayer to start loading its string resources from		// the server. You should listen for Event.COMPLETE, ProgressEvent.PROGRESS		// and IOErrorEvent.IO_ERROR to monitor the progress of the ExternalSoundFilePlayer		// starting up before calling this method.		//		//////////////////////////////////////////////////////////////////////////////////////////////				this.loadSetIndex = 0;			this.loadFileIndex = 0;			var approxBytesTotal:int = files.length * sets.length * (84674 + 5); //this is the approximate total size of all the sound files together			this.progEvent = new ProgressEvent(ProgressEvent.PROGRESS, false, false, 0, approxBytesTotal);			loadNextSound(null);		}				private function loadNextSound(e:Event){		//////////////////////////////////////////////////////////////////////////////////////////////			//		// the loadNextSound() method is called repeatedly to load each sound file		// in a controlled, serial manner. This method should be called in only two places:		//		inside the public load() method		//		inside the private onSoundComplete() method (called when the last sound file finishes loading)		//		//////////////////////////////////////////////////////////////////////////////////////////////							if (e != null) {				//just finished loading a sound, so we don't need event listeners on it anymore				e.target.removeEventListener(ProgressEvent.PROGRESS, this.onSoundProgress);				e.target.removeEventListener(IOErrorEvent.IO_ERROR, this.onSoundError);				e.target.removeEventListener(IOErrorEvent.NETWORK_ERROR, this.onSoundError);				e.target.removeEventListener(Event.COMPLETE, this.loadNextSound);				//trace("ExternalSoundFilePlayer.loadNextFile: Completed ("+this.loadSetIndex+":"+this.loadFileIndex+")");								this.loadFileIndex++;			}						if (this.loadFileIndex >= files.length) {				//finished loading all the files in the current set, so move on to the next				this.loadFileIndex = 0;				this.loadSetIndex++;			}						if (this.loadSetIndex >= sets.length) {				//finished loading the last file in the last set, so				//we're done loading everything!				this.dispatchEvent(e);				return;			}						//if there is no note array for this set index yet, create one			if (this.loadSetIndex >= notes.length) notes[this.loadSetIndex] = new Array();						//construct a new sound object to use			notes[this.loadSetIndex][this.loadFileIndex] = new Sound();			notes[this.loadSetIndex][this.loadFileIndex].addEventListener(Event.COMPLETE, loadNextSound, false, 0, true);			notes[this.loadSetIndex][this.loadFileIndex].addEventListener(ProgressEvent.PROGRESS, onSoundProgress, false, 0, true);			notes[this.loadSetIndex][this.loadFileIndex].addEventListener(IOErrorEvent.IO_ERROR, onSoundError, false, 0, true);			notes[this.loadSetIndex][this.loadFileIndex].addEventListener(IOErrorEvent.NETWORK_ERROR, onSoundError, false, 0, true);			//start counting bytes on the new file			cumulativeByteCounter = progEvent.bytesLoaded;			//start the load			var url:String = sets[this.loadSetIndex]+files[this.loadFileIndex];			//trace("ExternalSoundFilePlayer.loadNextFile: Loading ("+this.loadSetIndex+":"+this.loadFileIndex+") "+url);			notes[this.loadSetIndex][this.loadFileIndex].load(new URLRequest(url));		}				private function onSoundProgress(e:ProgressEvent) {			progEvent.bytesLoaded = cumulativeByteCounter + e.bytesLoaded;			this.dispatchEvent(progEvent);		}				private function onSoundError(e:IOErrorEvent) {			//TODO?			this.dispatchEvent(e);			loadNextSound(e);		}				public function get muted():Boolean{		//////////////////////////////////////////////////////////////////////////////////////////////		// return if muted		//////////////////////////////////////////////////////////////////////////////////////////////				if(_volume > 0) return false;			return true;					}				public function get numSets():uint {		//////////////////////////////////////////////////////////////////////////////////////////////		// The number of sound sets available		//////////////////////////////////////////////////////////////////////////////////////////////						return sets.length;		}						public function mute(){		//////////////////////////////////////////////////////////////////////////////////////////////		// Mute		//////////////////////////////////////////////////////////////////////////////////////////////						_volume = 0;		}				public function unmute(){		//////////////////////////////////////////////////////////////////////////////////////////////		// un mute		//////////////////////////////////////////////////////////////////////////////////////////////						_volume = 1;		}								public function play(index:int, set:int = 0):void{		//////////////////////////////////////////////////////////////////////////////////////////////		// play note from set at index		//////////////////////////////////////////////////////////////////////////////////////////////									/*			//Deprecated because the volume control is only used for boolean mute			//and creating new SoundTransforms creates latency and garbage collection			var myTransform = new SoundTransform();			myTransform.volume = _volume;			var myChannel:SoundChannel = new SoundChannel();			myChannel = notes[set][index].play();						myChannel.soundTransform = myTransform;			*/			if (_volume > 0) notes[set][index].play(0);											}			}}