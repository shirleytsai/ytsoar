/*  * PROJECT: AR Instrument * http://ytsoar.googlecode.com/ * Copyright 2010 Google Inc * -------------------------------------------------------------------------------- * This work complements FLARManager, developed by Eric Socolofsky * http://transmote.com/flar * FLARManager is Copyright 2009, Eric Socolofsky * * This work also complements FLARToolkit, developed by Saqoosha as part of the Libspark project. * http://www.libspark.org/wiki/saqoosha/FLARToolKit * FLARToolkit is Copyright (C)2008 Saqoosha, * and is ported from NYARToolkit, which is ported from ARToolkit.* * This program is free software; you can redistribute it and/or * modify it under the terms of the GNU General Public License * as published by the Free Software Foundation; either version 2 * of the License, or (at your option) any later version. *  * This program is distributed in the hope that it will be useful, * but WITHOUT ANY WARRANTY; without even the implied warranty of * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the * GNU General Public License for more details. *  * You should have received a copy of the GNU General Public License * along with this framework; if not, write to the Free Software * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA *  */package com.ytso {		import flash.events.Event;	import flash.events.ProgressEvent;	import flash.events.EventDispatcher;	import flash.events.ProgressEvent;	import flash.events.IOErrorEvent;	import flash.events.ErrorEvent;	import flash.errors.IOError;	import com.adobe.serialization.json.JSON;	import flash.events.HTTPStatusEvent;	import flash.net.URLRequest;	import flash.net.URLLoader;	import flash.net.URLRequestMethod;		public class LocalizationManager extends EventDispatcher {				private var initialized:Boolean = false;		private var lang:String = "";		private var rb:Object = {};				public function LocalizationManager(lang:String) {		//////////////////////////////////////////////////////////////////////////////////////////////		// Construct a new LocalizationManager. You should really		// only ever need one of these per app. Each LocalizationManager		// instance is tied to a single locale (language + country).		// You can't switch one you created for en-US to one that supports		// French Canadian. Instead, you need to create a new LocalizationManager		// to support the new language.		//		// LocalizationManager is not immediately ready for use.		// You need to add event listeners, then call the load() method		// before it can be used;		//		// @param lang:String The locale string indicating the language/country for which localization should be performed		//		//////////////////////////////////////////////////////////////////////////////////////////////				this.lang = lang;		}				public function load() {		//////////////////////////////////////////////////////////////////////////////////////////////			//		// the load() method causes the LocalizationManager to start loading its string resources from		// the server. You should listen for Event.COMPLETE, ProgressEvent.PROGRESS		// and IOErrorEvent.IO_ERROR to monitor the progress of the LocalizationManager		// starting up before calling this method.		//		//////////////////////////////////////////////////////////////////////////////////////////////				var req:URLRequest = new URLRequest('localhost');			req.method = URLRequestMethod.GET;						var ldr:URLLoader = new URLLoader();			ldr.addEventListener(Event.COMPLETE, loadComplete, false, 0, true);			ldr.addEventListener(ProgressEvent.PROGRESS, loadProgress, false, 0, true);			ldr.addEventListener(IOErrorEvent.IO_ERROR, loadError, false, 0, true);			ldr.addEventListener(IOErrorEvent.NETWORK_ERROR, loadError, false, 0, true);			ldr.addEventListener(HTTPStatusEvent.HTTP_STATUS, loadHTTPStatusChanged, false, 0, true);			ldr.load(req);		}				private function loadHTTPStatusChanged(e:HTTPStatusEvent) {		//////////////////////////////////////////////////////////////////////////////////////////////			// Handle errors loading resources from the server		//////////////////////////////////////////////////////////////////////////////////////////////				trace("HTTP status: "+e.status);		}				private function loadError(e:ErrorEvent) {		//////////////////////////////////////////////////////////////////////////////////////////////			// Handle errors loading resources from the server		//////////////////////////////////////////////////////////////////////////////////////////////				this.dispatchEvent(e);		}				private function loadProgress(e:ProgressEvent) {		//////////////////////////////////////////////////////////////////////////////////////////////			// Handle progress loading resources from the server		//////////////////////////////////////////////////////////////////////////////////////////////				this.dispatchEvent(e);		}				private function loadComplete(e:Event) {		//////////////////////////////////////////////////////////////////////////////////////////////			// Loading resources from the server is complete!		//////////////////////////////////////////////////////////////////////////////////////////////				trace("LocalizationManager for "+this.lang+" load completed");			this.initialized = true;			this.rb = JSON.decode(e.target.data);			this.dispatchEvent(e);		}				public function localizedString(id:String):String {		//////////////////////////////////////////////////////////////////////////////////////////////			// Get a localized string having the given identifier.		//		// @param id:String The ID of the string to get		// @return String The localized string		//		//////////////////////////////////////////////////////////////////////////////////////////////				return initialized ? (this.rb.hasOwnProperty(id) ? this.rb[id] : "") : "";		}		//////////////////////////////////////////////////////////////////////////////////////////////			// Returns this LocalizationManager's locale string		//////////////////////////////////////////////////////////////////////////////////////////////			public function get fullLang():String { return this.lang; }	}	}