/*  * PROJECT: AR Instrument * http://ytsoar.googlecode.com/ * Copyright 2010 Google Inc * -------------------------------------------------------------------------------- * This work complements FLARManager, developed by Eric Socolofsky * http://transmote.com/flar * FLARManager is Copyright 2009, Eric Socolofsky * * This work also complements FLARToolkit, developed by Saqoosha as part of the Libspark project. * http://www.libspark.org/wiki/saqoosha/FLARToolKit * FLARToolkit is Copyright (C)2008 Saqoosha, * and is ported from NYARToolkit, which is ported from ARToolkit.* * This program is free software; you can redistribute it and/or * modify it under the terms of the GNU General Public License * as published by the Free Software Foundation; either version 2 * of the License, or (at your option) any later version. *  * This program is distributed in the hope that it will be useful, * but WITHOUT ANY WARRANTY; without even the implied warranty of * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the * GNU General Public License for more details. *  * You should have received a copy of the GNU General Public License * along with this framework; if not, write to the Free Software * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA *  */package  com.ytso{	import flash.media.Sound;	import flash.net.URLRequest;	import flash.media.*;	import flash.events.EventDispatcher;	import flash.events.Event;	import flash.events.ProgressEvent;	import flash.events.IOErrorEvent;	import flash.events.IEventDispatcher;	public interface ISoundFilePlayer extends IEventDispatcher {				//////////////////////////////////////////////////////////////////////////////////////////////			//		// the load() method causes the SoundFilePlayer to start loading its string resources from		// the server. You should listen for Event.COMPLETE, ProgressEvent.PROGRESS		// and IOErrorEvent.IO_ERROR to monitor the progress of the SoundFilePlayer		// starting up before calling this method.		//		//////////////////////////////////////////////////////////////////////////////////////////////			function load();						//////////////////////////////////////////////////////////////////////////////////////////////		// return true if muted		//////////////////////////////////////////////////////////////////////////////////////////////			function get muted():Boolean;				//////////////////////////////////////////////////////////////////////////////////////////////		// The number of sound sets available		//////////////////////////////////////////////////////////////////////////////////////////////					function get numSets():uint;						//////////////////////////////////////////////////////////////////////////////////////////////		// Mute this SoundFilePlayer		//////////////////////////////////////////////////////////////////////////////////////////////					function mute();				//////////////////////////////////////////////////////////////////////////////////////////////		// un mute this SoundFilePlayer		//////////////////////////////////////////////////////////////////////////////////////////////					function unmute();						//////////////////////////////////////////////////////////////////////////////////////////////		// play note from set at index		//////////////////////////////////////////////////////////////////////////////////////////////					function play(index:int, set:int = 0):void;			}}