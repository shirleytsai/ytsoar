/*  * PROJECT: AR Instrument * http://ytsoar.googlecode.com/ * Copyright 2010 Google Inc * -------------------------------------------------------------------------------- * This work complements FLARManager, developed by Eric Socolofsky * http://transmote.com/flar * FLARManager is Copyright 2009, Eric Socolofsky * * This work also complements FLARToolkit, developed by Saqoosha as part of the Libspark project. * http://www.libspark.org/wiki/saqoosha/FLARToolKit * FLARToolkit is Copyright (C)2008 Saqoosha, * and is ported from NYARToolkit, which is ported from ARToolkit.* * This program is free software; you can redistribute it and/or * modify it under the terms of the GNU General Public License * as published by the Free Software Foundation; either version 2 * of the License, or (at your option) any later version. *  * This program is distributed in the hope that it will be useful, * but WITHOUT ANY WARRANTY; without even the implied warranty of * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the * GNU General Public License for more details. *  * You should have received a copy of the GNU General Public License * along with this framework; if not, write to the Free Software * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA *  */package com.ytso{		import flash.geom.*	import flash.display.*		public class NoteBar extends Sprite{				private var body:Sprite = new Sprite();				private var leftGrad:Sprite = new Sprite();		private var rightGrad:Sprite = new Sprite();		private var leftGray:Sprite = new Sprite();		private var rightGray:Sprite = new Sprite();		private var leftWhite:Sprite = new Sprite();		private var rightWhite:Sprite = new Sprite();		private var center:Sprite = new Sprite();				private var leadsMarker = false;		private var hitCount = 0;				private var _height:Number;				public function NoteBar(height:Number = 365) {		//////////////////////////////////////////////////////////////////////////////////////////////		// Draw the vertacle note bar		//////////////////////////////////////////////////////////////////////////////////////////////								_height = height;						body.graphics.drawRect(0,0,8,_height);			this.addChild(body);									var matr:Matrix = new Matrix();  			matr.createGradientBox(12.5, 12.5, 0, 0, 0);									/*			//leftGrad.graphics.beginGradientFill(GradientType.LINEAR, [0xffffff, 0x000000],[0, 1],[0, 255],matr,SpreadMethod.PAD,'rgb');			leftGrad.graphics.beginFill(0x000000, .25);			leftGrad.graphics.drawRect(0,0,9,_height);			leftGrad.graphics.endFill();						//rightGrad.graphics.beginGradientFill(GradientType.LINEAR, [0x000000, 0xffffff],[1, 0],[0, 255],matr,SpreadMethod.PAD,'rgb');			rightGrad.graphics.beginFill(0x000000, .25);			rightGrad.graphics.drawRect(0,0,10,_height);			rightGrad.graphics.endFill();			rightGrad.x += 7;									leftGray.graphics.beginFill(0xdddddd);			leftGray.graphics.drawRect(0, 0,2,_height);			leftGray.graphics.endFill();			leftGray.x += 5; 						rightGray.graphics.beginFill(0xdddddd);			rightGray.graphics.drawRect(0, 0,2,_height);			rightGray.graphics.endFill();			rightGray.x += 11; 									leftWhite.graphics.beginFill(0xffffff);			leftWhite.graphics.drawRect(0, 0,1,_height);			leftWhite.graphics.endFill();			leftWhite.x += 7; 						rightWhite.graphics.beginFill(0xffffff);			rightWhite.graphics.drawRect(0, 0,1,_height);			rightWhite.graphics.endFill();			rightWhite.x += 10; 			*/						//leftGrad.graphics.beginGradientFill(GradientType.LINEAR, [0xffffff, 0x000000],[0, 1],[0, 255],matr,SpreadMethod.PAD,'rgb');			rightGrad.graphics.beginFill(0xffffff, .25);			rightGrad.graphics.drawRect(0,0,8,_height);			rightGrad.graphics.endFill();									leftGrad.graphics.beginFill(0xffffff, .50);			leftGrad.graphics.drawRect(0,0,4,_height);			leftGrad.graphics.endFill();			leftGrad.x += 2;						center.graphics.beginFill(0x000000);			center.graphics.drawRect(0, 0,2,_height);			center.graphics.endFill();			center.x += 3; 															body.addChild(rightGrad);			body.addChild(leftGrad);			//body.addChild(leftGray);			//body.addChild(rightGray);			//body.addChild(leftWhite);			//body.addChild(rightWhite);			body.addChild(center);			body.x -= 4;								}						public function markerDidCross(markerLoc){			//////////////////////////////////////////////////////////////////////////////////////////////			// Check if the marker is on the other side of the line since last time			//////////////////////////////////////////////////////////////////////////////////////////////					var currentLoc = localToGlobal( new Point() );						if (currentLoc.x < 0) return false;						var currentOrientation = ((markerLoc.x - currentLoc.x) > 0);			if (currentOrientation ^ leadsMarker){				leadsMarker = currentOrientation;				return true;			}			return false;		}			}	}